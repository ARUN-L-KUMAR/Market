import React, { useEffect, useState, useMemo } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import axios from 'axios';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Badge from '../components/ui/Badge';
import { toast } from 'react-toastify';
import { ProductCardSkeleton } from '../components/ui/Skeleton';
import { addToCart } from '../store/cartSlice';
import socket from '../utils/socket';
import WishlistComparison from '../components/WishlistComparison';
import WishlistAnalytics from '../components/WishlistAnalytics';
import WishlistRecommendations from '../components/WishlistRecommendations';
import WishlistDebugger from '../components/WishlistDebugger';

const Wishlist = () => {
  const dispatch = useDispatch();
  const { token, user } = useSelector(state => state.user);
  const isAuthenticated = user && token;
  
  const [wishlistItems, setWishlistItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // New state for enhanced features
  const [selectedItems, setSelectedItems] = useState(new Set());
  const [sortBy, setSortBy] = useState('dateAdded');
  const [filterBy, setFilterBy] = useState('all');
  const [priceRange, setPriceRange] = useState({ min: '', max: '' });
  const [searchQuery, setSearchQuery] = useState('');
  const [viewMode, setViewMode] = useState('grid'); // grid or list
  const [showFilters, setShowFilters] = useState(false);
  const [recentlyViewed, setRecentlyViewed] = useState([]);
  const [isShareModalOpen, setIsShareModalOpen] = useState(false);
  const [showComparison, setShowComparison] = useState(false);

  const fetchWishlistItems = async () => {
    if (!isAuthenticated || !token) {
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001';
      const response = await axios.get(`${apiUrl}/api/wishlist`, {
        headers: { 
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      setWishlistItems(response.data.wishlist || []);
    } catch (err) {
      console.error('Error fetching wishlist:', err);
      const errorMessage = err.response?.data?.message || err.message || 'Failed to load your wishlist items';
      setError(errorMessage);
      if (err.response?.status !== 401) {
        toast.error('Failed to load wishlist');
      }
    } finally {
      setLoading(false);
    }
  };
    } finally {
      setLoading(false);
    }
  };

  // Filtered and sorted wishlist items
  const filteredAndSortedItems = useMemo(() => {
    // First filter out any items without valid products
    let filtered = wishlistItems.filter(item => item && item.product && item.product._id);

    // Apply search filter
    if (searchQuery) {
      filtered = filtered.filter(item =>
        item.product.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.product.description?.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Apply availability filter
    if (filterBy === 'inStock') {
      filtered = filtered.filter(item => item.product.inStock);
    } else if (filterBy === 'outOfStock') {
      filtered = filtered.filter(item => !item.product.inStock);
    }

    // Apply price range filter
    if (priceRange.min !== '') {
      filtered = filtered.filter(item => item.product.price >= parseFloat(priceRange.min));
    }
    if (priceRange.max !== '') {
      filtered = filtered.filter(item => item.product.price <= parseFloat(priceRange.max));
    }

    // Apply sorting
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'priceAsc':
          return a.product.price - b.product.price;
        case 'priceDesc':
          return b.product.price - a.product.price;
        case 'name':
          return a.product.title.localeCompare(b.product.title);
        case 'dateAdded':
        default:
          return new Date(b.createdAt || b.dateAdded) - new Date(a.createdAt || a.dateAdded);
      }
    });

    return filtered;
  }, [wishlistItems, searchQuery, filterBy, priceRange, sortBy]);

  useEffect(() => {
    fetchWishlistItems();
    
    // Fetch recently viewed items from localStorage
    const recentItems = JSON.parse(localStorage.getItem('recentlyViewed') || '[]');
    setRecentlyViewed(recentItems.slice(0, 4));
    
    // Listen for real-time wishlist updates
    socket.on('wishlistUpdated', fetchWishlistItems);
    
    return () => {
      socket.off('wishlistUpdated', fetchWishlistItems);
    };
  }, [isAuthenticated, token]);

  const handleRemoveFromWishlist = async (productId) => {
    try {
      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001';
      await axios.delete(`${apiUrl}/api/wishlist/${productId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      toast.success('Removed from wishlist');
      fetchWishlistItems();
      // Remove from selected items if it was selected
      setSelectedItems(prev => {
        const newSet = new Set(prev);
        newSet.delete(productId);
        return newSet;
      });
    } catch (error) {
      console.error('Error removing from wishlist:', error);
      toast.error('Failed to remove from wishlist');
    }
  };

  // Bulk actions
  const handleBulkRemove = async () => {
    if (selectedItems.size === 0) return;
    
    try {
      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001';
      await Promise.all(
        Array.from(selectedItems).map(productId =>
          axios.delete(`${apiUrl}/api/wishlist/${productId}`, {
            headers: { Authorization: `Bearer ${token}` }
          })
        )
      );
      toast.success(`Removed ${selectedItems.size} items from wishlist`);
      setSelectedItems(new Set());
      fetchWishlistItems();
    } catch (error) {
      console.error('Error bulk removing from wishlist:', error);
      toast.error('Failed to remove selected items');
    }
  };

  const handleBulkAddToCart = () => {
    if (selectedItems.size === 0) return;
    
    let addedCount = 0;
    selectedItems.forEach(productId => {
      const item = wishlistItems.find(w => w.product._id === productId);
      if (item && item.product.inStock) {
        handleAddToCart(item.product);
        addedCount++;
      }
    });
    
    if (addedCount > 0) {
      toast.success(`Added ${addedCount} items to cart`);
    }
    
    if (addedCount < selectedItems.size) {
      toast.warning(`${selectedItems.size - addedCount} items were out of stock`);
    }
  };

  const handleSelectAll = () => {
    if (selectedItems.size === filteredAndSortedItems.length) {
      setSelectedItems(new Set());
    } else {
      setSelectedItems(new Set(filteredAndSortedItems.map(item => item.product._id)));
    }
  };

  const handleItemSelect = (productId) => {
    setSelectedItems(prev => {
      const newSet = new Set(prev);
      if (newSet.has(productId)) {
        newSet.delete(productId);
      } else {
        newSet.add(productId);
      }
      return newSet;
    });
  };

  // Share wishlist functionality
  const handleShareWishlist = async () => {
    try {
      const shareData = {
        title: 'My Wishlist',
        text: `Check out my wishlist with ${wishlistItems.length} amazing products!`,
        url: window.location.href
      };

      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(window.location.href);
        toast.success('Wishlist link copied to clipboard!');
      }
    } catch (error) {
      console.error('Error sharing wishlist:', error);
      toast.error('Failed to share wishlist');
    }
  };

  // Export wishlist
  const handleExportWishlist = () => {
    const csvContent = [
      ['Product Name', 'Price', 'In Stock', 'Description'],
      ...wishlistItems.map(item => [
        item.product.title,
        `$${item.product.price?.toFixed(2) || '0.00'}`,
        item.product.inStock ? 'Yes' : 'No',
        item.product.description || 'No description'
      ])
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'my-wishlist.csv';
    a.click();
    window.URL.revokeObjectURL(url);
    toast.success('Wishlist exported successfully!');
  };

  const handleAddToCart = (product) => {
    if (!product.inStock) {
      toast.error('This product is out of stock');
      return;
    }

    dispatch(addToCart({
      id: product._id,
      title: product.title,
      price: product.price,
      image: product.images?.[0] || 'https://placehold.co/400x300?text=No+Image',
      quantity: 1,
      stock: product.stock
    }));
    
    toast.success(`${product.title} added to cart`);
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="container mx-auto px-4 max-w-7xl">
          <div className="bg-white rounded-2xl shadow-card p-8 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Please Sign In</h2>
            <p className="text-gray-600 mb-6">You need to be logged in to view your wishlist</p>
            <Button onClick={() => window.location.href = '/login'}>
              Sign In
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-7xl">
        {/* Header Section */}
        <div className="bg-white rounded-2xl shadow-card p-6 mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 className="text-3xl font-bold text-primary-800">My Wishlist</h1>
              <p className="text-gray-500">
                {filteredAndSortedItems.length} of {wishlistItems.length} items
                {selectedItems.size > 0 && ` • ${selectedItems.size} selected`}
              </p>
            </div>
            <div className="flex flex-wrap gap-2">
              {wishlistItems.length > 0 && (
                <>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleShareWishlist}
                    className="flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                    </svg>
                    Share
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleExportWishlist}
                    className="flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Export
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowComparison(true)}
                    disabled={wishlistItems.length < 2}
                    className="flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                    Compare
                  </Button>
                </>
              )}
            </div>
          </div>
        </div>

        {/* Filters and Controls */}
        {wishlistItems.length > 0 && (
          <div className="bg-white rounded-2xl shadow-card p-6 mb-8">
            <div className="flex flex-col lg:flex-row lg:items-center gap-4">
              {/* Search */}
              <div className="flex-1">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Search wishlist items..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  />
                  <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>

              {/* Sort and Filter */}
              <div className="flex flex-wrap gap-2">
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
                >
                  <option value="dateAdded">Recently Added</option>
                  <option value="name">Name A-Z</option>
                  <option value="priceAsc">Price Low-High</option>
                  <option value="priceDesc">Price High-Low</option>
                </select>

                <select
                  value={filterBy}
                  onChange={(e) => setFilterBy(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
                >
                  <option value="all">All Items</option>
                  <option value="inStock">In Stock</option>
                  <option value="outOfStock">Out of Stock</option>
                </select>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowFilters(!showFilters)}
                  className="flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                  </svg>
                  Filters
                </Button>

                {/* View Mode Toggle */}
                <div className="flex border border-gray-300 rounded-lg overflow-hidden">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`p-2 ${viewMode === 'grid' ? 'bg-primary-500 text-white' : 'bg-white text-gray-600 hover:bg-gray-50'}`}
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`p-2 ${viewMode === 'list' ? 'bg-primary-500 text-white' : 'bg-white text-gray-600 hover:bg-gray-50'}`}
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            {/* Advanced Filters */}
            {showFilters && (
              <div className="mt-4 pt-4 border-t border-gray-200">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Price Range</label>
                    <div className="flex gap-2">
                      <input
                        type="number"
                        placeholder="Min"
                        value={priceRange.min}
                        onChange={(e) => setPriceRange(prev => ({ ...prev, min: e.target.value }))}
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
                      />
                      <span className="self-center text-gray-500">to</span>
                      <input
                        type="number"
                        placeholder="Max"
                        value={priceRange.max}
                        onChange={(e) => setPriceRange(prev => ({ ...prev, max: e.target.value }))}
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
                      />
                    </div>
                  </div>
                  <div className="flex items-end">
                    <Button
                      variant="outline"
                      onClick={() => {
                        setSearchQuery('');
                        setFilterBy('all');
                        setPriceRange({ min: '', max: '' });
                        setSortBy('dateAdded');
                      }}
                      className="w-full"
                    >
                      Clear All Filters
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Bulk Actions */}
            {filteredAndSortedItems.length > 0 && (
              <div className="mt-4 pt-4 border-t border-gray-200">
                <div className="flex flex-wrap items-center gap-4">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={selectedItems.size === filteredAndSortedItems.length && filteredAndSortedItems.length > 0}
                      onChange={handleSelectAll}
                      className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                    />
                    <span className="text-sm text-gray-700">Select All</span>
                  </label>
                  
                  {selectedItems.size > 0 && (
                    <div className="flex gap-2">
                      <Button
                        variant="primary"
                        size="sm"
                        onClick={handleBulkAddToCart}
                        className="flex items-center gap-2"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                        </svg>
                        Add to Cart ({selectedItems.size})
                      </Button>
                      <Button
                        variant="danger"
                        size="sm"
                        onClick={handleBulkRemove}
                        className="flex items-center gap-2"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Remove ({selectedItems.size})
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Analytics Section */}
        {wishlistItems.length > 0 && (
          <WishlistAnalytics />
        )}

        {/* Content */}
        {loading ? (
          <div className={viewMode === 'grid' ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" : "space-y-4"}>
            {[...Array(4)].map((_, index) => (
              <Card key={index} padding="none" className="flex flex-col h-full">
                <ProductCardSkeleton />
              </Card>
            ))}
          </div>
        ) : error ? (
          <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
            <p className="text-red-700">{error}</p>
          </div>
        ) : filteredAndSortedItems.length === 0 ? (
          <div className="bg-white rounded-2xl shadow-card p-12 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">
              {wishlistItems.length === 0 ? 'Your wishlist is empty' : 'No items match your filters'}
            </h2>
            <p className="text-gray-600 mb-6">
              {wishlistItems.length === 0 
                ? 'Browse our products and add items to your wishlist' 
                : 'Try adjusting your search criteria or filters'
              }
            </p>
            <Button onClick={() => window.location.href = '/products'}>
              Shop Now
            </Button>
          </div>
        ) : (
          <div>
            {/* Wishlist Items */}
            <div className={viewMode === 'grid' 
              ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" 
              : "space-y-4"
            }>
              {filteredAndSortedItems.map(item => {
                // Additional safety check
                if (!item || !item.product || !item.product._id) {
                  return null;
                }
                
                return viewMode === 'grid' ? (
                <Card 
                  key={item.product._id} 
                  hover={true}
                  padding="none"
                  className="flex flex-col h-full relative group"
                >
                  {/* Selection Checkbox */}
                  <div className="absolute top-3 left-3 z-10">
                    <input
                      type="checkbox"
                      checked={selectedItems.has(item.product._id)}
                      onChange={() => handleItemSelect(item.product._id)}
                      className="rounded border-gray-300 text-primary-600 focus:ring-primary-500 bg-white shadow-sm"
                    />
                  </div>

                  {/* Stock Badge */}
                  <div className="absolute top-3 right-3 z-10">
                    <Badge 
                      color={item.product.inStock ? 'success' : 'danger'} 
                      size="sm"
                    >
                      {item.product.inStock ? 'In Stock' : 'Out of Stock'}
                    </Badge>
                  </div>

                  <Card.Image 
                    src={item.product.images && item.product.images[0] ? item.product.images[0] : 'https://placehold.co/400x300?text=No+Image'} 
                    alt={item.product.title} 
                    className="aspect-[4/3] object-cover group-hover:scale-105 transition-transform duration-300"
                  />
                  
                  <div className="p-4 flex-1 flex flex-col">
                    <div className="flex justify-between items-start mb-2">
                      <Card.Title className="line-clamp-2">{item.product.title}</Card.Title>
                      <button 
                        onClick={() => handleRemoveFromWishlist(item.product._id)}
                        className="text-gray-400 hover:text-red-500 transition-colors ml-2 flex-shrink-0"
                        title="Remove from wishlist"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                        </svg>
                      </button>
                    </div>
                    
                    <div className="text-sm text-gray-600 mb-3 flex-1">
                      <p className="line-clamp-2">{item.product.description || 'No description available'}</p>
                    </div>
                    
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <p className="text-lg font-bold text-primary-600">${item.product.price?.toFixed(2) || '0.00'}</p>
                        {item.product.comparePrice && (
                          <p className="text-sm text-gray-400 line-through">${item.product.comparePrice?.toFixed(2)}</p>
                        )}
                      </div>
                      {item.product.stock <= 5 && item.product.inStock && (
                        <Badge color="warning" size="sm">
                          Only {item.product.stock} left
                        </Badge>
                      )}
                    </div>
                    
                    <div className="space-y-2">
                      <Button
                        variant="primary"
                        fullWidth
                        onClick={() => handleAddToCart(item.product)}
                        disabled={!item.product.inStock}
                        className="flex items-center justify-center gap-2"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                        </svg>
                        {item.product.inStock ? 'Add to Cart' : 'Out of Stock'}
                      </Button>
                      <Button
                        variant="outline"
                        fullWidth
                        onClick={() => window.location.href = `/products/${item.product._id}`}
                        className="flex items-center justify-center gap-2"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                        View Details
                      </Button>
                    </div>
                  </div>
                </Card>
              ) : (
                // List View
                <Card key={item.product._id} className="flex items-center p-4 gap-4 hover:shadow-md transition-shadow">
                  <input
                    type="checkbox"
                    checked={selectedItems.has(item.product._id)}
                    onChange={() => handleItemSelect(item.product._id)}
                    className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                  />
                  
                  <div className="w-20 h-20 flex-shrink-0">
                    <img
                      src={item.product.images && item.product.images[0] ? item.product.images[0] : 'https://placehold.co/80x80?text=No+Image'}
                      alt={item.product.title}
                      className="w-full h-full object-cover rounded-lg"
                    />
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <h3 className="text-lg font-semibold text-gray-900 truncate">{item.product.title}</h3>
                    <p className="text-sm text-gray-600 line-clamp-1">{item.product.description || 'No description available'}</p>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge color={item.product.inStock ? 'success' : 'danger'} size="sm">
                        {item.product.inStock ? 'In Stock' : 'Out of Stock'}
                      </Badge>
                      {item.product.stock <= 5 && item.product.inStock && (
                        <Badge color="warning" size="sm">
                          Only {item.product.stock} left
                        </Badge>
                      )}
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <p className="text-lg font-bold text-primary-600">${item.product.price?.toFixed(2) || '0.00'}</p>
                    {item.product.comparePrice && (
                      <p className="text-sm text-gray-400 line-through">${item.product.comparePrice?.toFixed(2)}</p>
                    )}
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <Button
                      variant="primary"
                      size="sm"
                      onClick={() => handleAddToCart(item.product)}
                      disabled={!item.product.inStock}
                      className="flex items-center gap-1"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                      </svg>
                      Cart
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => window.location.href = `/products/${item.product._id}`}
                    >
                      View
                    </Button>
                    <button 
                      onClick={() => handleRemoveFromWishlist(item.product._id)}
                      className="text-gray-400 hover:text-red-500 transition-colors p-1"
                      title="Remove from wishlist"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </Card>
              );
              })}
            </div>

            {/* Recently Viewed Section */}
            {recentlyViewed.length > 0 && (
              <div className="mt-12">
                <div className="bg-white rounded-2xl shadow-card p-6">
                  <h3 className="text-xl font-bold text-gray-800 mb-4">Recently Viewed</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    {recentlyViewed.map(product => (
                      <div key={product._id} className="border border-gray-200 rounded-lg p-3 hover:shadow-md transition-shadow">
                        <div className="aspect-square mb-2">
                          <img
                            src={product.images?.[0] || 'https://placehold.co/150x150?text=No+Image'}
                            alt={product.title}
                            className="w-full h-full object-cover rounded-md"
                          />
                        </div>
                        <h4 className="font-medium text-sm line-clamp-2 mb-1">{product.title}</h4>
                        <p className="text-primary-600 font-bold text-sm">${product.price?.toFixed(2)}</p>
                        <Button
                          variant="outline"
                          size="sm"
                          fullWidth
                          className="mt-2"
                          onClick={() => window.location.href = `/products/${product._id}`}
                        >
                          View Again
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Recommendations Section */}
            <div className="mt-12">
              <WishlistRecommendations wishlistItems={wishlistItems} />
            </div>
          </div>
        )}
        
        {/* Comparison Modal */}
        {showComparison && (
          <WishlistComparison
            products={wishlistItems.map(item => item.product)}
            onClose={() => setShowComparison(false)}
            onAddToCart={handleAddToCart}
          />
        )}

        {/* Debugger - Remove in production */}
        <WishlistDebugger wishlistItems={wishlistItems} />
      </div>
    </div>
  );
};

export default Wishlist;
